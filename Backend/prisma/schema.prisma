// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for more type-safe definitions
enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  NONE
}
enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum JoinRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ProofType {
  RECEIPT
  INVOICE
  SCREENSHOT
  OTHER
}

enum GroupRole {
  ADMIN
  MEMBER
  OWNER
}

enum Role {
  ADMIN
  USER
}

// Adding a new enum for expense split type
enum SplitType {
  EQUAL           // Split equally among selected members
  PERCENTAGE      // Split by percentage
  FIXED_AMOUNT    // Fixed amount per person
  CUSTOM          // Custom split amounts
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String?
  profilePicture String?
  role      Role @default(USER)

  
  // Relationships
  createdGroups     Group[]       @relation("GroupCreator")
  groupMemberships  GroupMember[]
  paidExpenses      Expense[]     @relation("ExpensePayer")
  expenseSplits     ExpenseSplit[]
  sentPayments      Payment[]     @relation("PaymentSender")
  receivedPayments  Payment[]     @relation("PaymentReceiver")
  proofOfPayments   ProofOfPayment[]
  verifiedProofs    ProofOfPayment[] @relation("ProofVerifier")
  joinRequests      GroupJoinRequest[]
  receivedInvitations GroupInvitation[] @relation("InvitedUser")
  sentInvitations   GroupInvitation[] @relation("InvitationSender")
  // New - expenses the user is included in
  includedInExpenses ExpenseParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvalidatedToken{
  id        String    @id @default(cuid())
  token     String
  expiryTime       DateTime     
}

model Group {
  id          String   @id @default(cuid())
  name        String
  password    String
  description String?
  
  // Relationships
  creator     User     @relation("GroupCreator", fields: [creatorId], references: [id])
  creatorId   String
  members     GroupMember[]
  expenses    Expense[]

  joinRequests GroupJoinRequest[]
  invitations  GroupInvitation[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GroupMember {
  id        String    @id @default(cuid())
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  role      GroupRole @default(MEMBER)

  joinedAt   DateTime @default(now())

  @@unique([groupId, userId])
}

// Add this new model for group join requests
model GroupJoinRequest {
  id        String           @id @default(cuid())
  group     Group            @relation(fields: [groupId], references: [id])
  groupId   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  status    JoinRequestStatus @default(PENDING)
  message   String?          // Optional message from the user requesting to join
  
  requestedAt DateTime @default(now())
  respondedAt DateTime?       // When the creator accepted/declined
}

model GroupInvitation {
  id        String           @id @default(cuid())
  group     Group            @relation(fields: [groupId], references: [id])
  groupId   String
  
  // The user being invited
  invitedUser User           @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId String
  
  // The user who sent the invitation (usually the creator)
  sender    User             @relation("InvitationSender", fields: [senderId], references: [id])
  senderId  String
  
  status    InvitationStatus @default(PENDING)
  message   String?          // Optional message from the inviter
  
  invitedAt DateTime @default(now())
  respondedAt DateTime?      // When the invited user accepted/declined
}

model Expense {
  id              String        @id @default(cuid())
  description     String
  totalAmount     Decimal       @db.Decimal(10, 2)
  expenseDate     DateTime
  
  // Relationships
  paidBy          User          @relation("ExpensePayer", fields: [paidById], references: [id])
  paidById        String
  group           Group?        @relation(fields: [groupId], references: [id])
  groupId         String?

  // Discount details
  discountType    DiscountType  @default(NONE)
  discountValue   Decimal       @default(0) @db.Decimal(10, 2)
  discountedAmount Decimal      @db.Decimal(10, 2)

  // Split type
  splitType       SplitType     @default(EQUAL)

  // Related records
  participants    ExpenseParticipant[] 
  splits          ExpenseSplit[]
  proofOfPayments ProofOfPayment[]
  

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// New model to explicitly define which users are included in an expense
model ExpenseParticipant {
  id              String    @id @default(cuid())
  
  // Relationships
  expense         Expense   @relation(fields: [expenseId], references: [id])
  expenseId       String
  user            User      @relation(fields: [userId], references: [id])
  userId          String

  // For percentage splits
  percentage      Decimal?  @db.Decimal(5, 2)  
  // For fixed amount splits
  fixedAmount     Decimal?  @db.Decimal(10, 2)
  createdAt       DateTime  @default(now())

  @@unique([expenseId, userId])
}

model ExpenseSplit {
  id              String    @id @default(cuid())
  
  // Relationships
  expense         Expense   @relation(fields: [expenseId], references: [id])
  expenseId       String
  user            User      @relation(fields: [userId], references: [id])
  userId          String

  individualTotal Decimal   @db.Decimal(10, 2)
  splitAmount     Decimal   @db.Decimal(10, 2)
  isPaid          Boolean   @default(false)
  paidAt          DateTime?

  payments        Payment[]

  @@unique([expenseId, userId])
}

model Payment {
  id              String        @id @default(cuid())
  
  // Relationships
  fromUser        User          @relation("PaymentSender", fields: [fromUserId], references: [id])
  fromUserId      String
  toUser          User          @relation("PaymentReceiver", fields: [toUserId], references: [id])
  toUserId        String
  expenseSplit    ExpenseSplit? @relation(fields: [expenseSplitId], references: [id])
  expenseSplitId  String?
  proofOfPayment  ProofOfPayment? @relation(fields: [proofId], references: [id])
  proofId         String?

  amount          Decimal       @db.Decimal(10, 2)
  paymentDate     DateTime      @default(now())
}

model ProofOfPayment {
  id              String    @id @default(cuid())
  
  // Relationships
  expense         Expense   @relation(fields: [expenseId], references: [id])
  expenseId       String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  verifiedBy      User?     @relation("ProofVerifier", fields: [verifiedById], references: [id])
  verifiedById    String?

  proofType       ProofType
  fileUrl         String
  fileType        String
  description     String?
  
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?

  payments        Payment[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}